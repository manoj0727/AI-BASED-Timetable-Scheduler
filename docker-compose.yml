version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: timetable-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: timetable_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - timetable-network

  # Go Backend API
  go-backend:
    build:
      context: ./go-backend
      dockerfile: Dockerfile
    container_name: timetable-api
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - APP_ENV=production
      - APP_PORT=8000
      - DB_HOST=postgres
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/timetable_db?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - timetable-network
    volumes:
      - ./storage:/root/storage

  # Next.js Frontend (coming soon)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: timetable-web
  #   ports:
  #     - "3000:3000"
  #   env_file:
  #     - .env
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://go-backend:8000
  #   depends_on:
  #     - go-backend
  #   restart: unless-stopped
  #   networks:
  #     - timetable-network

networks:
  timetable-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
